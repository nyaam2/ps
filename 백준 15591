import java.awt.print.Pageable;
import java.io.*;
import java.util.*;

import static java.util.Arrays.sort;
public  class Main {

    public  static void main(String[] args) throws IOException {
        class pair{
            int end;
            int USADO;

            public pair(int end,int USADO){
                this.end=end;
                this.USADO=USADO;
            }
        }


        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer(br.readLine());

        int n=Integer.parseInt(st.nextToken());



        Vector<Integer>[] g=new Vector[n+1];
        Set<Integer>s[]=new HashSet[n+1];
        for(int i=0;i<=n;i++){
            s[i]=new HashSet<>();
        }
        for(int i=0;i<=n;i++){
            g[i]=new Vector<>();
        }


        st=new StringTokenizer(br.readLine());
        int q=Integer.parseInt(st.nextToken());

        for(int i=1;i<=n;i++){
            int start,end,USADO;
            st=new StringTokenizer(br.readLine());
            start=Integer.parseInt(st.nextToken());
            end=Integer.parseInt(st.nextToken());
            USADO=Integer.parseInt(st.nextToken());
            s[start].add(end);
            s[end].add(start);
            g[start].add(USADO);
            g[end].add(USADO);
        }

        for(int i=0;i<q;i++){
            st=new StringTokenizer(br.readLine());
            int k=Integer.parseInt(st.nextToken());//최소값
            int v=Integer.parseInt(st.nextToken());//해당 동영상

            boolean visited[]=new boolean[n+1];
            int answer=0;
            bfs(v,k,visited,answer,g[v]);
        }
    }

    static void bfs(int v,int k,boolean visited[],int answer,Vector<Integer>g){
        Queue<Integer>q=new LinkedList<>();

        q.add(v);
        while(!q.isEmpty()){
            int a=q.poll();
            if(a>=k){
                answer++;
                for(int i=0;i<g.size();i++){
                    if()
                }
            }

        }
    }
}
